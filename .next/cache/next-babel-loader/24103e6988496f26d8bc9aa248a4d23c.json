{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchEmployees),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchFetchEmployees),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addEmployee),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddEmployee),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(deleteEmployee),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemoveEmployee),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(updateEmployee),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchUpdateEmployee),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, put, takeLatest } from \"redux-saga/effects\";\nimport * as t from \"../types\";\n\nfunction fetchEmployees() {\n  var response, employeeList;\n  return _regeneratorRuntime.wrap(function fetchEmployees$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return fetch(\"/api/employees\");\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return response.json();\n\n        case 6:\n          employeeList = _context.sent;\n          _context.next = 9;\n          return put({\n            type: t.EMPLOYEE_FETCH_SUCCEEDED,\n            payload: employeeList.data\n          });\n\n        case 9:\n          _context.next = 15;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 15;\n          return put({\n            type: t.EMPLOYEE_FETCH_FAILED,\n            payload: _context.t0.message\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 11]]);\n}\n\nfunction watchFetchEmployees() {\n  return _regeneratorRuntime.wrap(function watchFetchEmployees$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(t.EMPLOYEE_FETCH_REQUESTED, fetchEmployees);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addEmployee(action) {\n  var response, newEmployee;\n  return _regeneratorRuntime.wrap(function addEmployee$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return fetch(\"/api/employees\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(action.payload)\n          });\n\n        case 3:\n          response = _context3.sent;\n          _context3.next = 6;\n          return response.json();\n\n        case 6:\n          newEmployee = _context3.sent;\n          _context3.next = 9;\n          return put({\n            type: t.EMPLOYEE_ADD_SUCCEEDED,\n            payload: newEmployee.data\n          });\n\n        case 9:\n          _context3.next = 15;\n          break;\n\n        case 11:\n          _context3.prev = 11;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 15;\n          return put({\n            type: t.EMPLOYEE_ADD_FAILED,\n            payload: _context3.t0.message\n          });\n\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 11]]);\n}\n\nfunction watchAddEmployee() {\n  return _regeneratorRuntime.wrap(function watchAddEmployee$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(t.EMPLOYEE_ADD_REQUESTED, addEmployee);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction deleteEmployee(action) {\n  var response, deletedEmployee;\n  return _regeneratorRuntime.wrap(function deleteEmployee$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return fetch(\"/api/employees/\" + action.payload, {\n            method: \"DELETE\"\n          });\n\n        case 3:\n          response = _context5.sent;\n          _context5.next = 6;\n          return response.json();\n\n        case 6:\n          deletedEmployee = _context5.sent;\n          _context5.next = 9;\n          return put({\n            type: t.EMPLOYEE_DELETE_SUCCEEDED,\n            payload: deletedEmployee.data.id\n          });\n\n        case 9:\n          _context5.next = 15;\n          break;\n\n        case 11:\n          _context5.prev = 11;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 15;\n          return put({\n            type: t.EMPLOYEE_DELETE_FAILED,\n            payload: _context5.t0.message\n          });\n\n        case 15:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 11]]);\n}\n\nfunction watchRemoveEmployee() {\n  return _regeneratorRuntime.wrap(function watchRemoveEmployee$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(t.EMPLOYEE_DELETE_REQUESTED, deleteEmployee);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction updateEmployee(action) {\n  var response, updatedEmployee;\n  return _regeneratorRuntime.wrap(function updateEmployee$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return fetch(\"/api/employees/\" + action.payload._id, {\n            method: \"PUT\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(action.payload)\n          });\n\n        case 3:\n          response = _context7.sent;\n          _context7.next = 6;\n          return response.json();\n\n        case 6:\n          updatedEmployee = _context7.sent;\n          _context7.next = 9;\n          return put({\n            type: t.EMPLOYEE_UPDATE_SUCCEEDED,\n            payload: updatedEmployee.data\n          });\n\n        case 9:\n          _context7.next = 15;\n          break;\n\n        case 11:\n          _context7.prev = 11;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 15;\n          return put({\n            type: t.EMPLOYEE_UPDATE_FAILED,\n            payload: _context7.t0.message\n          });\n\n        case 15:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 11]]);\n}\n\nfunction watchUpdateEmployee() {\n  return _regeneratorRuntime.wrap(function watchUpdateEmployee$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(t.EMPLOYEE_UPDATE_REQUESTED, updateEmployee);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([watchFetchEmployees(), watchAddEmployee(), watchRemoveEmployee(), watchUpdateEmployee()]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["/home/globalia/Downloads/next-crud-master/store/sagas/employee.js"],"names":["fetchEmployees","watchFetchEmployees","addEmployee","watchAddEmployee","deleteEmployee","watchRemoveEmployee","updateEmployee","watchUpdateEmployee","rootSaga","all","put","takeLatest","t","fetch","response","json","employeeList","type","EMPLOYEE_FETCH_SUCCEEDED","payload","data","EMPLOYEE_FETCH_FAILED","message","EMPLOYEE_FETCH_REQUESTED","action","method","headers","body","JSON","stringify","newEmployee","EMPLOYEE_ADD_SUCCEEDED","EMPLOYEE_ADD_FAILED","EMPLOYEE_ADD_REQUESTED","deletedEmployee","EMPLOYEE_DELETE_SUCCEEDED","id","EMPLOYEE_DELETE_FAILED","EMPLOYEE_DELETE_REQUESTED","_id","updatedEmployee","EMPLOYEE_UPDATE_SUCCEEDED","EMPLOYEE_UPDATE_FAILED","EMPLOYEE_UPDATE_REQUESTED"],"mappings":"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","sourcesContent":["import { all, put, takeLatest } from \"redux-saga/effects\";\nimport * as t from \"../types\";\n\nfunction* fetchEmployees() {\n\ttry {\n\t\tconst response = yield fetch(\"/api/employees\");\n\n\t\tconst employeeList = yield response.json();\n\n\t\tyield put({\n\t\t\ttype: t.EMPLOYEE_FETCH_SUCCEEDED,\n\t\t\tpayload: employeeList.data,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: t.EMPLOYEE_FETCH_FAILED,\n\t\t\tpayload: error.message,\n\t\t});\n\t}\n}\n\nfunction* watchFetchEmployees() {\n\tyield takeLatest(t.EMPLOYEE_FETCH_REQUESTED, fetchEmployees);\n}\n\nfunction* addEmployee(action) {\n\ttry {\n\t\tconst response = yield fetch(\"/api/employees\", {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify(action.payload),\n\t\t});\n\n\t\tconst newEmployee = yield response.json();\n\n\t\tyield put({\n\t\t\ttype: t.EMPLOYEE_ADD_SUCCEEDED,\n\t\t\tpayload: newEmployee.data,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: t.EMPLOYEE_ADD_FAILED,\n\t\t\tpayload: error.message,\n\t\t});\n\t}\n}\n\nfunction* watchAddEmployee() {\n\tyield takeLatest(t.EMPLOYEE_ADD_REQUESTED, addEmployee);\n}\n\nfunction* deleteEmployee(action) {\n\ttry {\n\t\tconst response = yield fetch(\"/api/employees/\" + action.payload, {\n\t\t\tmethod: \"DELETE\",\n\t\t});\n\n\t\tconst deletedEmployee = yield response.json();\n\n\t\tyield put({\n\t\t\ttype: t.EMPLOYEE_DELETE_SUCCEEDED,\n\t\t\tpayload: deletedEmployee.data.id,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: t.EMPLOYEE_DELETE_FAILED,\n\t\t\tpayload: error.message,\n\t\t});\n\t}\n}\n\nfunction* watchRemoveEmployee() {\n\tyield takeLatest(t.EMPLOYEE_DELETE_REQUESTED, deleteEmployee);\n}\n\nfunction* updateEmployee(action) {\n\ttry {\n\t\tconst response = yield fetch(\"/api/employees/\" + action.payload._id, {\n\t\t\tmethod: \"PUT\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify(action.payload),\n\t\t});\n\n\t\tconst updatedEmployee = yield response.json();\n\n\t\tyield put({\n\t\t\ttype: t.EMPLOYEE_UPDATE_SUCCEEDED,\n\t\t\tpayload: updatedEmployee.data,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: t.EMPLOYEE_UPDATE_FAILED,\n\t\t\tpayload: error.message,\n\t\t});\n\t}\n}\n\nfunction* watchUpdateEmployee() {\n\tyield takeLatest(t.EMPLOYEE_UPDATE_REQUESTED, updateEmployee);\n}\n\nexport default function* rootSaga() {\n\tyield all([\n\t\twatchFetchEmployees(),\n\t\twatchAddEmployee(),\n\t\twatchRemoveEmployee(),\n\t\twatchUpdateEmployee(),\n\t]);\n}\n"]},"metadata":{},"sourceType":"module"}