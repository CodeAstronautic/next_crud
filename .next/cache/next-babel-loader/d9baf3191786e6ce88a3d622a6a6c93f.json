{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/home/globalia/Downloads/next-crud-master/components/Modal.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport cx from \"clsx\";\nimport { CheckSVG, CloseSVG } from \"@/icons\";\nimport { addEmployee, setModalOpen, setSelectedEmployee, updateEmployee } from \"@/store\";\nexport function Modal() {\n  _s();\n\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.errors,\n      reset = _useForm.reset,\n      setValue = _useForm.setValue;\n\n  var state = useSelector(function (state) {\n    return state.employee;\n  });\n  var dispatch = useDispatch();\n\n  var closeModal = function closeModal() {\n    reset();\n    dispatch(setModalOpen(false));\n    dispatch(setSelectedEmployee(undefined));\n  };\n\n  var onSubmitHandler = function onSubmitHandler(data) {\n    if (data) {\n      closeModal();\n    }\n\n    if (state.selectedEmployee) {\n      dispatch(updateEmployee(_objectSpread({\n        _id: state.selectedEmployee._id\n      }, data)));\n    } else {\n      dispatch(addEmployee(data));\n    }\n  };\n\n  useEffect(function () {\n    if (state.selectedEmployee) {\n      setValue(\"name\", state.selectedEmployee.name);\n      setValue(\"email\", state.selectedEmployee.email);\n      setValue(\"address\", state.selectedEmployee.address);\n      setValue(\"phone\", state.selectedEmployee.phone);\n    }\n  }, [state.selectedEmployee, setValue]);\n  return state.isModalOpen ? /*#__PURE__*/ReactDOM.createPortal(__jsx(\"div\", {\n    className: \"modal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"modal__content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 6\n    }\n  }, __jsx(\"header\", {\n    className: \"header modal__header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    className: \"header__h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 8\n    }\n  }, state.selectedEmployee ? __jsx(React.Fragment, null, \"Edit \", __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 16\n    }\n  }, \"Employee\")) : __jsx(React.Fragment, null, \"Add \", __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }, \"Employee\"))), __jsx(\"button\", {\n    className: \"btn btn__compact btn__close\",\n    onClick: closeModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 8\n    }\n  }, __jsx(CloseSVG, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }))), __jsx(\"form\", {\n    className: \"form modal__form\",\n    onSubmit: handleSubmit(onSubmitHandler),\n    noValidate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"form__element\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 8\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"nameInput\",\n    className: cx(\"label\", errors.name && \"label--error\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, errors.name ? \"Full name is required!\" : __jsx(React.Fragment, null, \"Full name\\xA0\", __jsx(\"span\", {\n    className: \"label__required\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 27\n    }\n  }, \"*\"))), __jsx(\"input\", {\n    type: \"text\",\n    id: \"nameInput\",\n    name: \"name\",\n    placeholder: \"Full name\",\n    className: cx(\"input\", errors.name && \"input--error\"),\n    ref: register({\n      required: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: \"form__element\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 8\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"emailInput\",\n    className: cx(\"label\", errors.email && \"label--error\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, errors.email ? \"\".concat(errors.email.message) : __jsx(React.Fragment, null, \"Email\\xA0\", __jsx(\"span\", {\n    className: \"label__required\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 23\n    }\n  }, \"*\"))), __jsx(\"input\", {\n    type: \"email\",\n    id: \"emailInput\",\n    name: \"email\",\n    placeholder: \"Email\",\n    className: cx(\"input\", errors.email && \"input--error\"),\n    ref: register({\n      required: \"Email is required!\",\n      pattern: {\n        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n        message: \"Invalid email address!\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: \"form__element\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 8\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"addressArea\",\n    className: cx(\"label\", errors.address && \"label--error\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, errors.address ? \"Address is required!\" : __jsx(React.Fragment, null, \"Address\\xA0\", __jsx(\"span\", {\n    className: \"label__required\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 25\n    }\n  }, \"*\"))), __jsx(\"textarea\", {\n    type: \"text\",\n    id: \"addressArea\",\n    name: \"address\",\n    placeholder: \"Address\",\n    className: cx(\"area\", errors.address && \"input--error\"),\n    ref: register({\n      required: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: \"form__element\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 8\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"phoneNumber\",\n    className: cx(\"label\", errors.phone && \"label--error\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, errors.phone ? \"\".concat(errors.phone.message) : __jsx(React.Fragment, null, \"Phone\\xA0\", __jsx(\"span\", {\n    className: \"label__required\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 23\n    }\n  }, \"*\"))), __jsx(\"input\", {\n    type: \"number\",\n    id: \"phoneNumber\",\n    name: \"phone\",\n    placeholder: \"Phone\",\n    className: cx(\"input\", errors.phone && \"input--error\"),\n    ref: register({\n      required: \"Phone is required!\",\n      minLength: {\n        value: 11,\n        message: \"Minimum of 11 digits\"\n      },\n      maxLength: {\n        value: 12,\n        message: \"Maximum of 12 digits\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: \"form__action\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 8\n    }\n  }, __jsx(\"button\", {\n    className: \"btn btn__icon btn__cancel\",\n    type: \"button\",\n    onClick: closeModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }\n  }, __jsx(CloseSVG, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 10\n    }\n  }), \" Cancel\"), __jsx(\"button\", {\n    className: \"btn btn__primary btn__icon\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }\n  }, __jsx(CheckSVG, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 10\n    }\n  }), \" \", state.selectedEmployee ? \"Update\" : \"Submit\"))))), document.body) : null;\n}\n\n_s(Modal, \"aTH9w72VflbJeAI3WBGRD6dDgWM=\", false, function () {\n  return [useForm, useSelector, useDispatch];\n});\n\n_c = Modal;\n\nvar _c;\n\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"sources":["/home/globalia/Downloads/next-crud-master/components/Modal.js"],"names":["useEffect","ReactDOM","useDispatch","useSelector","useForm","cx","CheckSVG","CloseSVG","addEmployee","setModalOpen","setSelectedEmployee","updateEmployee","Modal","register","handleSubmit","errors","reset","setValue","state","employee","dispatch","closeModal","undefined","onSubmitHandler","data","selectedEmployee","_id","name","email","address","phone","isModalOpen","createPortal","required","message","pattern","value","minLength","maxLength","document","body"],"mappings":";;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,EAAP,MAAe,MAAf;AAEA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,SAAnC;AACA,SACCC,WADD,EAECC,YAFD,EAGCC,mBAHD,EAICC,cAJD,QAKO,SALP;AAOA,OAAO,SAASC,KAAT,GAAiB;AAAA;;AAAA,iBACqCR,OAAO,EAD5C;AAAA,MACfS,QADe,YACfA,QADe;AAAA,MACLC,YADK,YACLA,YADK;AAAA,MACSC,MADT,YACSA,MADT;AAAA,MACiBC,KADjB,YACiBA,KADjB;AAAA,MACwBC,QADxB,YACwBA,QADxB;;AAGvB,MAAMC,KAAK,GAAGf,WAAW,CAAC,UAACe,KAAD;AAAA,WAAWA,KAAK,CAACC,QAAjB;AAAA,GAAD,CAAzB;AAEA,MAAMC,QAAQ,GAAGlB,WAAW,EAA5B;;AAEA,MAAMmB,UAAU,GAAG,SAAbA,UAAa,GAAM;AACxBL,IAAAA,KAAK;AACLI,IAAAA,QAAQ,CAACX,YAAY,CAAC,KAAD,CAAb,CAAR;AACAW,IAAAA,QAAQ,CAACV,mBAAmB,CAACY,SAAD,CAApB,CAAR;AACA,GAJD;;AAMA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD,EAAU;AACjC,QAAIA,IAAJ,EAAU;AACTH,MAAAA,UAAU;AACV;;AACD,QAAIH,KAAK,CAACO,gBAAV,EAA4B;AAC3BL,MAAAA,QAAQ,CACPT,cAAc;AACbe,QAAAA,GAAG,EAAER,KAAK,CAACO,gBAAN,CAAuBC;AADf,SAEVF,IAFU,EADP,CAAR;AAMA,KAPD,MAOO;AACNJ,MAAAA,QAAQ,CAACZ,WAAW,CAACgB,IAAD,CAAZ,CAAR;AACA;AACD,GAdD;;AAgBAxB,EAAAA,SAAS,CAAC,YAAM;AACf,QAAIkB,KAAK,CAACO,gBAAV,EAA4B;AAC3BR,MAAAA,QAAQ,CAAC,MAAD,EAASC,KAAK,CAACO,gBAAN,CAAuBE,IAAhC,CAAR;AACAV,MAAAA,QAAQ,CAAC,OAAD,EAAUC,KAAK,CAACO,gBAAN,CAAuBG,KAAjC,CAAR;AACAX,MAAAA,QAAQ,CAAC,SAAD,EAAYC,KAAK,CAACO,gBAAN,CAAuBI,OAAnC,CAAR;AACAZ,MAAAA,QAAQ,CAAC,OAAD,EAAUC,KAAK,CAACO,gBAAN,CAAuBK,KAAjC,CAAR;AACA;AACD,GAPQ,EAON,CAACZ,KAAK,CAACO,gBAAP,EAAyBR,QAAzB,CAPM,CAAT;AASA,SAAOC,KAAK,CAACa,WAAN,gBACJ9B,QAAQ,CAAC+B,YAAT,CACA;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAQ,IAAA,SAAS,EAAC,sBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAI,IAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEd,KAAK,CAACO,gBAAN,GACA,qCACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADN,CADA,GAKA,oCACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADL,CANF,CADD,EAYC;AACC,IAAA,SAAS,EAAC,6BADX;AAEC,IAAA,OAAO,EAAEJ,UAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIC,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJD,CAZD,CADD,EAqBC;AACC,IAAA,SAAS,EAAC,kBADX;AAEC,IAAA,QAAQ,EAAEP,YAAY,CAACS,eAAD,CAFvB;AAGC,IAAA,UAAU,MAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKC;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AACC,IAAA,OAAO,EAAC,WADT;AAEC,IAAA,SAAS,EAAElB,EAAE,CAAC,OAAD,EAAUU,MAAM,CAACY,IAAP,IAAe,cAAzB,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIEZ,MAAM,CAACY,IAAP,GACA,wBADA,GAGA,6CACgB;AAAM,IAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADhB,CAPF,CADD,EAaC;AACC,IAAA,IAAI,EAAC,MADN;AAEC,IAAA,EAAE,EAAC,WAFJ;AAGC,IAAA,IAAI,EAAC,MAHN;AAIC,IAAA,WAAW,EAAC,WAJb;AAKC,IAAA,SAAS,EAAEtB,EAAE,CAAC,OAAD,EAAUU,MAAM,CAACY,IAAP,IAAe,cAAzB,CALd;AAMC,IAAA,GAAG,EAAEd,QAAQ,CAAC;AAAEoB,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbD,CALD,EA4BC;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AACC,IAAA,OAAO,EAAC,YADT;AAEC,IAAA,SAAS,EAAE5B,EAAE,CAAC,OAAD,EAAUU,MAAM,CAACa,KAAP,IAAgB,cAA1B,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIEb,MAAM,CAACa,KAAP,aACGb,MAAM,CAACa,KAAP,CAAaM,OADhB,IAGA,yCACY;AAAM,IAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADZ,CAPF,CADD,EAaC;AACC,IAAA,IAAI,EAAC,OADN;AAEC,IAAA,EAAE,EAAC,YAFJ;AAGC,IAAA,IAAI,EAAC,OAHN;AAIC,IAAA,WAAW,EAAC,OAJb;AAKC,IAAA,SAAS,EAAE7B,EAAE,CAAC,OAAD,EAAUU,MAAM,CAACa,KAAP,IAAgB,cAA1B,CALd;AAMC,IAAA,GAAG,EAAEf,QAAQ,CAAC;AACboB,MAAAA,QAAQ,EAAE,oBADG;AAEbE,MAAAA,OAAO,EAAE;AACRC,QAAAA,KAAK,EAAE,2CADC;AAERF,QAAAA,OAAO,EAAE;AAFD;AAFI,KAAD,CANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbD,CA5BD,EAyDC;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AACC,IAAA,OAAO,EAAC,aADT;AAEC,IAAA,SAAS,EAAE7B,EAAE,CAAC,OAAD,EAAUU,MAAM,CAACc,OAAP,IAAkB,cAA5B,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIEd,MAAM,CAACc,OAAP,GACA,sBADA,GAGA,2CACc;AAAM,IAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADd,CAPF,CADD,EAaC;AACC,IAAA,IAAI,EAAC,MADN;AAEC,IAAA,EAAE,EAAC,aAFJ;AAGC,IAAA,IAAI,EAAC,SAHN;AAIC,IAAA,WAAW,EAAC,SAJb;AAKC,IAAA,SAAS,EAAExB,EAAE,CAAC,MAAD,EAASU,MAAM,CAACc,OAAP,IAAkB,cAA3B,CALd;AAMC,IAAA,GAAG,EAAEhB,QAAQ,CAAC;AAAEoB,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbD,CAzDD,EAgFC;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AACC,IAAA,OAAO,EAAC,aADT;AAEC,IAAA,SAAS,EAAE5B,EAAE,CAAC,OAAD,EAAUU,MAAM,CAACe,KAAP,IAAgB,cAA1B,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIEf,MAAM,CAACe,KAAP,aACGf,MAAM,CAACe,KAAP,CAAaI,OADhB,IAGA,yCACY;AAAM,IAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADZ,CAPF,CADD,EAaC;AACC,IAAA,IAAI,EAAC,QADN;AAEC,IAAA,EAAE,EAAC,aAFJ;AAGC,IAAA,IAAI,EAAC,OAHN;AAIC,IAAA,WAAW,EAAC,OAJb;AAKC,IAAA,SAAS,EAAE7B,EAAE,CAAC,OAAD,EAAUU,MAAM,CAACe,KAAP,IAAgB,cAA1B,CALd;AAMC,IAAA,GAAG,EAAEjB,QAAQ,CAAC;AACboB,MAAAA,QAAQ,EAAE,oBADG;AAEbI,MAAAA,SAAS,EAAE;AACVD,QAAAA,KAAK,EAAE,EADG;AAEVF,QAAAA,OAAO,EAAE;AAFC,OAFE;AAMbI,MAAAA,SAAS,EAAE;AACVF,QAAAA,KAAK,EAAE,EADG;AAEVF,QAAAA,OAAO,EAAE;AAFC;AANE,KAAD,CANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbD,CAhFD,EAiHC;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AACC,IAAA,SAAS,EAAC,2BADX;AAEC,IAAA,IAAI,EAAC,QAFN;AAGC,IAAA,OAAO,EAAEb,UAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKC,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALD,YADD,EAQC;AAAQ,IAAA,SAAS,EAAC,4BAAlB;AAA+C,IAAA,IAAI,EAAC,QAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,OACeH,KAAK,CAACO,gBAAN,GAAyB,QAAzB,GAAoC,QADnD,CARD,CAjHD,CArBD,CADD,CADA,EAuJAc,QAAQ,CAACC,IAvJT,CADI,GA0JJ,IA1JH;AA2JA;;GAjMe5B,K;UAC6CR,O,EAE9CD,W,EAEGD,W;;;KALFU,K","sourcesContent":["import { useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport cx from \"clsx\";\n\nimport { CheckSVG, CloseSVG } from \"@/icons\";\nimport {\n\taddEmployee,\n\tsetModalOpen,\n\tsetSelectedEmployee,\n\tupdateEmployee,\n} from \"@/store\";\n\nexport function Modal() {\n\tconst { register, handleSubmit, errors, reset, setValue } = useForm();\n\n\tconst state = useSelector((state) => state.employee);\n\n\tconst dispatch = useDispatch();\n\n\tconst closeModal = () => {\n\t\treset();\n\t\tdispatch(setModalOpen(false));\n\t\tdispatch(setSelectedEmployee(undefined));\n\t};\n\n\tconst onSubmitHandler = (data) => {\n\t\tif (data) {\n\t\t\tcloseModal();\n\t\t}\n\t\tif (state.selectedEmployee) {\n\t\t\tdispatch(\n\t\t\t\tupdateEmployee({\n\t\t\t\t\t_id: state.selectedEmployee._id,\n\t\t\t\t\t...data,\n\t\t\t\t})\n\t\t\t);\n\t\t} else {\n\t\t\tdispatch(addEmployee(data));\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (state.selectedEmployee) {\n\t\t\tsetValue(\"name\", state.selectedEmployee.name);\n\t\t\tsetValue(\"email\", state.selectedEmployee.email);\n\t\t\tsetValue(\"address\", state.selectedEmployee.address);\n\t\t\tsetValue(\"phone\", state.selectedEmployee.phone);\n\t\t}\n\t}, [state.selectedEmployee, setValue]);\n\n\treturn state.isModalOpen\n\t\t? ReactDOM.createPortal(\n\t\t\t\t<div className=\"modal\">\n\t\t\t\t\t<div className=\"modal__content\">\n\t\t\t\t\t\t<header className=\"header modal__header\">\n\t\t\t\t\t\t\t<h1 className=\"header__h2\">\n\t\t\t\t\t\t\t\t{state.selectedEmployee ? (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\tEdit <span>Employee</span>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\tAdd <span>Employee</span>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn__compact btn__close\"\n\t\t\t\t\t\t\t\tonClick={closeModal}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CloseSVG />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</header>\n\n\t\t\t\t\t\t<form\n\t\t\t\t\t\t\tclassName=\"form modal__form\"\n\t\t\t\t\t\t\tonSubmit={handleSubmit(onSubmitHandler)}\n\t\t\t\t\t\t\tnoValidate\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"form__element\">\n\t\t\t\t\t\t\t\t<label\n\t\t\t\t\t\t\t\t\thtmlFor=\"nameInput\"\n\t\t\t\t\t\t\t\t\tclassName={cx(\"label\", errors.name && \"label--error\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{errors.name ? (\n\t\t\t\t\t\t\t\t\t\t\"Full name is required!\"\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\tFull name&nbsp;<span className=\"label__required\">*</span>\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tid=\"nameInput\"\n\t\t\t\t\t\t\t\t\tname=\"name\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"Full name\"\n\t\t\t\t\t\t\t\t\tclassName={cx(\"input\", errors.name && \"input--error\")}\n\t\t\t\t\t\t\t\t\tref={register({ required: true })}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"form__element\">\n\t\t\t\t\t\t\t\t<label\n\t\t\t\t\t\t\t\t\thtmlFor=\"emailInput\"\n\t\t\t\t\t\t\t\t\tclassName={cx(\"label\", errors.email && \"label--error\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{errors.email ? (\n\t\t\t\t\t\t\t\t\t\t`${errors.email.message}`\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\tEmail&nbsp;<span className=\"label__required\">*</span>\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\t\t\t\tid=\"emailInput\"\n\t\t\t\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"Email\"\n\t\t\t\t\t\t\t\t\tclassName={cx(\"input\", errors.email && \"input--error\")}\n\t\t\t\t\t\t\t\t\tref={register({\n\t\t\t\t\t\t\t\t\t\trequired: \"Email is required!\",\n\t\t\t\t\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\t\t\t\t\tvalue: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n\t\t\t\t\t\t\t\t\t\t\tmessage: \"Invalid email address!\",\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"form__element\">\n\t\t\t\t\t\t\t\t<label\n\t\t\t\t\t\t\t\t\thtmlFor=\"addressArea\"\n\t\t\t\t\t\t\t\t\tclassName={cx(\"label\", errors.address && \"label--error\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{errors.address ? (\n\t\t\t\t\t\t\t\t\t\t\"Address is required!\"\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\tAddress&nbsp;<span className=\"label__required\">*</span>\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tid=\"addressArea\"\n\t\t\t\t\t\t\t\t\tname=\"address\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"Address\"\n\t\t\t\t\t\t\t\t\tclassName={cx(\"area\", errors.address && \"input--error\")}\n\t\t\t\t\t\t\t\t\tref={register({ required: true })}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"form__element\">\n\t\t\t\t\t\t\t\t<label\n\t\t\t\t\t\t\t\t\thtmlFor=\"phoneNumber\"\n\t\t\t\t\t\t\t\t\tclassName={cx(\"label\", errors.phone && \"label--error\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{errors.phone ? (\n\t\t\t\t\t\t\t\t\t\t`${errors.phone.message}`\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\tPhone&nbsp;<span className=\"label__required\">*</span>\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\t\tid=\"phoneNumber\"\n\t\t\t\t\t\t\t\t\tname=\"phone\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"Phone\"\n\t\t\t\t\t\t\t\t\tclassName={cx(\"input\", errors.phone && \"input--error\")}\n\t\t\t\t\t\t\t\t\tref={register({\n\t\t\t\t\t\t\t\t\t\trequired: \"Phone is required!\",\n\t\t\t\t\t\t\t\t\t\tminLength: {\n\t\t\t\t\t\t\t\t\t\t\tvalue: 11,\n\t\t\t\t\t\t\t\t\t\t\tmessage: \"Minimum of 11 digits\",\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tmaxLength: {\n\t\t\t\t\t\t\t\t\t\t\tvalue: 12,\n\t\t\t\t\t\t\t\t\t\t\tmessage: \"Maximum of 12 digits\",\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"form__action\">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn__icon btn__cancel\"\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={closeModal}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CloseSVG /> Cancel\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button className=\"btn btn__primary btn__icon\" type=\"submit\">\n\t\t\t\t\t\t\t\t\t<CheckSVG /> {state.selectedEmployee ? \"Update\" : \"Submit\"}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t</div>,\n\t\t\t\tdocument.body\n\t\t  )\n\t\t: null;\n}\n"]},"metadata":{},"sourceType":"module"}