{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport * as t from \"../types\";\nconst initialState = {\n  employeeList: [],\n  selectedEmployee: undefined,\n  isModalOpen: false\n};\n\nconst mainReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case t.MODAL_OPEN:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isModalOpen: action.payload\n      });\n\n    case t.EMPLOYEE_FETCH_SUCCEEDED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        employeeList: action.payload\n      });\n\n    case t.EMPLOYEE_ADD_SUCCEEDED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        employeeList: [action.payload, ...state.employeeList]\n      });\n\n    case t.EMPLOYEE_UPDATE_SUCCEEDED:\n      const updatedEmployee = state.employeeList.map(employee => {\n        if (employee._id === action.payload._id) {\n          return _objectSpread(_objectSpread({}, employee), {}, {\n            name: action.payload.name,\n            email: action.payload.email,\n            address: action.payload.address,\n            phone: action.payload.phone\n          });\n        }\n\n        return employee;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        employeeList: updatedEmployee\n      });\n\n    case t.EMPLOYEE_DELETE_SUCCEEDED:\n      const newEmployeeList = state.employeeList.filter(employee => employee._id !== action.payload);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        employeeList: newEmployeeList\n      });\n\n    case t.EMPLOYEE_SELECTED:\n      const selectedEmployee = state.employeeList.find(employee => employee._id === action.payload);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectedEmployee\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default mainReducer;","map":{"version":3,"sources":["/home/globalia/Downloads/next-crud-master/store/reducers/employee.js"],"names":["HYDRATE","t","initialState","employeeList","selectedEmployee","undefined","isModalOpen","mainReducer","state","action","type","payload","MODAL_OPEN","EMPLOYEE_FETCH_SUCCEEDED","EMPLOYEE_ADD_SUCCEEDED","EMPLOYEE_UPDATE_SUCCEEDED","updatedEmployee","map","employee","_id","name","email","address","phone","EMPLOYEE_DELETE_SUCCEEDED","newEmployeeList","filter","EMPLOYEE_SELECTED","find"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,OAAO,KAAKC,CAAZ,MAAmB,UAAnB;AAEA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,YAAY,EAAE,EADM;AAEpBC,EAAAA,gBAAgB,EAAEC,SAFE;AAGpBC,EAAAA,WAAW,EAAE;AAHO,CAArB;;AAMA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKV,OAAL;AACC,6CAAYQ,KAAZ,GAAsBC,MAAM,CAACE,OAA7B;;AACD,SAAKV,CAAC,CAACW,UAAP;AACC,6CACIJ,KADJ;AAECF,QAAAA,WAAW,EAAEG,MAAM,CAACE;AAFrB;;AAID,SAAKV,CAAC,CAACY,wBAAP;AACC,6CACIL,KADJ;AAECL,QAAAA,YAAY,EAAEM,MAAM,CAACE;AAFtB;;AAID,SAAKV,CAAC,CAACa,sBAAP;AACC,6CACIN,KADJ;AAECL,QAAAA,YAAY,EAAE,CAACM,MAAM,CAACE,OAAR,EAAiB,GAAGH,KAAK,CAACL,YAA1B;AAFf;;AAID,SAAKF,CAAC,CAACc,yBAAP;AACC,YAAMC,eAAe,GAAGR,KAAK,CAACL,YAAN,CAAmBc,GAAnB,CAAwBC,QAAD,IAAc;AAC5D,YAAIA,QAAQ,CAACC,GAAT,KAAiBV,MAAM,CAACE,OAAP,CAAeQ,GAApC,EAAyC;AACxC,iDACID,QADJ;AAECE,YAAAA,IAAI,EAAEX,MAAM,CAACE,OAAP,CAAeS,IAFtB;AAGCC,YAAAA,KAAK,EAAEZ,MAAM,CAACE,OAAP,CAAeU,KAHvB;AAICC,YAAAA,OAAO,EAAEb,MAAM,CAACE,OAAP,CAAeW,OAJzB;AAKCC,YAAAA,KAAK,EAAEd,MAAM,CAACE,OAAP,CAAeY;AALvB;AAOA;;AACD,eAAOL,QAAP;AACA,OAXuB,CAAxB;AAaA,6CAAYV,KAAZ;AAAmBL,QAAAA,YAAY,EAAEa;AAAjC;;AACD,SAAKf,CAAC,CAACuB,yBAAP;AACC,YAAMC,eAAe,GAAGjB,KAAK,CAACL,YAAN,CAAmBuB,MAAnB,CACtBR,QAAD,IAAcA,QAAQ,CAACC,GAAT,KAAiBV,MAAM,CAACE,OADf,CAAxB;AAGA,6CACIH,KADJ;AAECL,QAAAA,YAAY,EAAEsB;AAFf;;AAID,SAAKxB,CAAC,CAAC0B,iBAAP;AACC,YAAMvB,gBAAgB,GAAGI,KAAK,CAACL,YAAN,CAAmByB,IAAnB,CACvBV,QAAD,IAAcA,QAAQ,CAACC,GAAT,KAAiBV,MAAM,CAACE,OADd,CAAzB;AAGA,6CACIH,KADJ;AAECJ,QAAAA;AAFD;;AAID;AACC,aAAOI,KAAP;AAlDF;AAoDA,CArDD;;AAuDA,eAAeD,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\nimport * as t from \"../types\";\n\nconst initialState = {\n\temployeeList: [],\n\tselectedEmployee: undefined,\n\tisModalOpen: false,\n};\n\nconst mainReducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase HYDRATE:\n\t\t\treturn { ...state, ...action.payload };\n\t\tcase t.MODAL_OPEN:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisModalOpen: action.payload,\n\t\t\t};\n\t\tcase t.EMPLOYEE_FETCH_SUCCEEDED:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\temployeeList: action.payload,\n\t\t\t};\n\t\tcase t.EMPLOYEE_ADD_SUCCEEDED:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\temployeeList: [action.payload, ...state.employeeList],\n\t\t\t};\n\t\tcase t.EMPLOYEE_UPDATE_SUCCEEDED:\n\t\t\tconst updatedEmployee = state.employeeList.map((employee) => {\n\t\t\t\tif (employee._id === action.payload._id) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...employee,\n\t\t\t\t\t\tname: action.payload.name,\n\t\t\t\t\t\temail: action.payload.email,\n\t\t\t\t\t\taddress: action.payload.address,\n\t\t\t\t\t\tphone: action.payload.phone,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn employee;\n\t\t\t});\n\n\t\t\treturn { ...state, employeeList: updatedEmployee };\n\t\tcase t.EMPLOYEE_DELETE_SUCCEEDED:\n\t\t\tconst newEmployeeList = state.employeeList.filter(\n\t\t\t\t(employee) => employee._id !== action.payload\n\t\t\t);\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\temployeeList: newEmployeeList,\n\t\t\t};\n\t\tcase t.EMPLOYEE_SELECTED:\n\t\t\tconst selectedEmployee = state.employeeList.find(\n\t\t\t\t(employee) => employee._id === action.payload\n\t\t\t);\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tselectedEmployee,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default mainReducer;\n"]},"metadata":{},"sourceType":"module"}