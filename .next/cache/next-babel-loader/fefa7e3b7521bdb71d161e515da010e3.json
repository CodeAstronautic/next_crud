{"ast":null,"code":"import { all, put, takeLatest } from \"redux-saga/effects\";\nimport * as t from \"../types\";\n\nfunction* fetchEmployees() {\n  try {\n    const response = yield fetch(\"/api/employees\");\n    const employeeList = yield response.json();\n    yield put({\n      type: t.EMPLOYEE_FETCH_SUCCEEDED,\n      payload: employeeList.data\n    });\n  } catch (error) {\n    yield put({\n      type: t.EMPLOYEE_FETCH_FAILED,\n      payload: error.message\n    });\n  }\n}\n\nfunction* watchFetchEmployees() {\n  yield takeLatest(t.EMPLOYEE_FETCH_REQUESTED, fetchEmployees);\n}\n\nfunction* addEmployee(action) {\n  try {\n    const response = yield fetch(\"/api/employees\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(action.payload)\n    });\n    const newEmployee = yield response.json();\n    yield put({\n      type: t.EMPLOYEE_ADD_SUCCEEDED,\n      payload: newEmployee.data\n    });\n  } catch (error) {\n    yield put({\n      type: t.EMPLOYEE_ADD_FAILED,\n      payload: error.message\n    });\n  }\n}\n\nfunction* watchAddEmployee() {\n  yield takeLatest(t.EMPLOYEE_ADD_REQUESTED, addEmployee);\n}\n\nfunction* deleteEmployee(action) {\n  try {\n    const response = yield fetch(\"/api/employees/\" + action.payload, {\n      method: \"DELETE\"\n    });\n    const deletedEmployee = yield response.json();\n    yield put({\n      type: t.EMPLOYEE_DELETE_SUCCEEDED,\n      payload: deletedEmployee.data.id\n    });\n  } catch (error) {\n    yield put({\n      type: t.EMPLOYEE_DELETE_FAILED,\n      payload: error.message\n    });\n  }\n}\n\nfunction* watchRemoveEmployee() {\n  yield takeLatest(t.EMPLOYEE_DELETE_REQUESTED, deleteEmployee);\n}\n\nfunction* updateEmployee(action) {\n  try {\n    const response = yield fetch(\"/api/employees/\" + action.payload._id, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(action.payload)\n    });\n    const updatedEmployee = yield response.json();\n    yield put({\n      type: t.EMPLOYEE_UPDATE_SUCCEEDED,\n      payload: updatedEmployee.data\n    });\n  } catch (error) {\n    yield put({\n      type: t.EMPLOYEE_UPDATE_FAILED,\n      payload: error.message\n    });\n  }\n}\n\nfunction* watchUpdateEmployee() {\n  yield takeLatest(t.EMPLOYEE_UPDATE_REQUESTED, updateEmployee);\n}\n\nexport default function* rootSaga() {\n  yield all([watchFetchEmployees(), watchAddEmployee(), watchRemoveEmployee(), watchUpdateEmployee()]);\n}","map":{"version":3,"sources":["/home/globalia/Downloads/next-crud-master/store/sagas/employee.js"],"names":["all","put","takeLatest","t","fetchEmployees","response","fetch","employeeList","json","type","EMPLOYEE_FETCH_SUCCEEDED","payload","data","error","EMPLOYEE_FETCH_FAILED","message","watchFetchEmployees","EMPLOYEE_FETCH_REQUESTED","addEmployee","action","method","headers","body","JSON","stringify","newEmployee","EMPLOYEE_ADD_SUCCEEDED","EMPLOYEE_ADD_FAILED","watchAddEmployee","EMPLOYEE_ADD_REQUESTED","deleteEmployee","deletedEmployee","EMPLOYEE_DELETE_SUCCEEDED","id","EMPLOYEE_DELETE_FAILED","watchRemoveEmployee","EMPLOYEE_DELETE_REQUESTED","updateEmployee","_id","updatedEmployee","EMPLOYEE_UPDATE_SUCCEEDED","EMPLOYEE_UPDATE_FAILED","watchUpdateEmployee","EMPLOYEE_UPDATE_REQUESTED","rootSaga"],"mappings":"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","sourcesContent":["import { all, put, takeLatest } from \"redux-saga/effects\";\nimport * as t from \"../types\";\n\nfunction* fetchEmployees() {\n\ttry {\n\t\tconst response = yield fetch(\"/api/employees\");\n\n\t\tconst employeeList = yield response.json();\n\n\t\tyield put({\n\t\t\ttype: t.EMPLOYEE_FETCH_SUCCEEDED,\n\t\t\tpayload: employeeList.data,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: t.EMPLOYEE_FETCH_FAILED,\n\t\t\tpayload: error.message,\n\t\t});\n\t}\n}\n\nfunction* watchFetchEmployees() {\n\tyield takeLatest(t.EMPLOYEE_FETCH_REQUESTED, fetchEmployees);\n}\n\nfunction* addEmployee(action) {\n\ttry {\n\t\tconst response = yield fetch(\"/api/employees\", {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify(action.payload),\n\t\t});\n\n\t\tconst newEmployee = yield response.json();\n\n\t\tyield put({\n\t\t\ttype: t.EMPLOYEE_ADD_SUCCEEDED,\n\t\t\tpayload: newEmployee.data,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: t.EMPLOYEE_ADD_FAILED,\n\t\t\tpayload: error.message,\n\t\t});\n\t}\n}\n\nfunction* watchAddEmployee() {\n\tyield takeLatest(t.EMPLOYEE_ADD_REQUESTED, addEmployee);\n}\n\nfunction* deleteEmployee(action) {\n\ttry {\n\t\tconst response = yield fetch(\"/api/employees/\" + action.payload, {\n\t\t\tmethod: \"DELETE\",\n\t\t});\n\n\t\tconst deletedEmployee = yield response.json();\n\n\t\tyield put({\n\t\t\ttype: t.EMPLOYEE_DELETE_SUCCEEDED,\n\t\t\tpayload: deletedEmployee.data.id,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: t.EMPLOYEE_DELETE_FAILED,\n\t\t\tpayload: error.message,\n\t\t});\n\t}\n}\n\nfunction* watchRemoveEmployee() {\n\tyield takeLatest(t.EMPLOYEE_DELETE_REQUESTED, deleteEmployee);\n}\n\nfunction* updateEmployee(action) {\n\ttry {\n\t\tconst response = yield fetch(\"/api/employees/\" + action.payload._id, {\n\t\t\tmethod: \"PUT\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify(action.payload),\n\t\t});\n\n\t\tconst updatedEmployee = yield response.json();\n\n\t\tyield put({\n\t\t\ttype: t.EMPLOYEE_UPDATE_SUCCEEDED,\n\t\t\tpayload: updatedEmployee.data,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: t.EMPLOYEE_UPDATE_FAILED,\n\t\t\tpayload: error.message,\n\t\t});\n\t}\n}\n\nfunction* watchUpdateEmployee() {\n\tyield takeLatest(t.EMPLOYEE_UPDATE_REQUESTED, updateEmployee);\n}\n\nexport default function* rootSaga() {\n\tyield all([\n\t\twatchFetchEmployees(),\n\t\twatchAddEmployee(),\n\t\twatchRemoveEmployee(),\n\t\twatchUpdateEmployee(),\n\t]);\n}\n"]},"metadata":{},"sourceType":"module"}