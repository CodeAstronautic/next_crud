{"version":3,"file":"index.cjs.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/compact.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/utils/isPrimitive.ts","../src/utils/deepMerge.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/isString.ts","../src/logic/getFieldsValues.ts","../src/utils/deepEqual.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/cloneObject.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/fillBooleanArray.ts","../src/useFieldArray.ts","../src/useField.ts","../src/logic/getInputValue.ts","../src/controller.tsx","../src/logic/isErrorStateChanged.ts","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/utils/onDomRemove.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: [] | string) =>\n  !Array.isArray(value) && /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option, index): void => {\n        if (\n          (option.ref &&\n            isDetached(option.ref) &&\n            isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields),\n    setDirtyFields(defaultValues, values, dirtyFields),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    if (!(isErrorObject && ['ref', 'context'].includes(key))) {\n      const val1 = object1[key];\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || Array.isArray(val1)) &&\n        (isObject(val2) || Array.isArray(val2))\n          ? !deepEqual(val1, val2, isErrorObject)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\n\nexport const getPath = <T extends string, U extends object | unknown[]>(\n  path: T,\n  values: U,\n): string[] => {\n  const getInnerPath = <K>(key: K, value: U, isObject?: boolean) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(key, value, isObject(values)))\n    .flat(Infinity) as string[];\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import isPrimitive from './isPrimitive';\n\nexport default function cloneObject<T extends unknown>(\n  data: T,\n  isWeb = true,\n): T {\n  let copy: any;\n\n  if (isPrimitive(data) || (isWeb && data instanceof File)) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key), isWeb));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key], isWeb);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const fieldArrayValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<\n    Record<string, InternalNameSet<TFieldValues>>\n  >({});\n  const useWatchRenderFunctionsRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef<\n    Partial<DefaultValues<TFieldValues>>\n  >({});\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<\n      InternalFieldName<FieldValues>,\n      (data?: UnpackNestedValue<DeepPartial<TFieldValues>>) => void\n    >\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues, isWeb)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: string,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | string[]\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(\n          formValues,\n          isEmptyObject(defaultValuesRef.current)\n            ? defaultValuesAtRenderRef.current\n            : defaultValuesRef.current,\n        );\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<{\n      dirtyFields: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty: boolean;\n      touched: FieldNamesMarkedBoolean<TFieldValues>;\n    }> => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesAtRenderRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        if (isChanged && shouldRender) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...state,\n          };\n          updateFormState({\n            ...formStateRef.current,\n          });\n        }\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          errors: formStateRef.current.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields, readFormStateRef.current.isValid);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    <T extends FieldName<TFieldValues>, U extends object | unknown[]>(\n      name: T,\n      value: U,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !isPrimitive(value) && set(shallowFieldsStateRef.current, name, value);\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          fieldArrayDefaultValuesRef.current[\n            name\n          ] = value as TFieldValues[string];\n          resetFieldArrayFunctionRef.current[name]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n              dirtyFields: formStateRef.current.dirtyFields,\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<FieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n    found = true,\n  ): boolean => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data, isWeb);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current, isWeb),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else if (watchFieldsRef) {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            errors: formStateRef.current.errors,\n            isDirty: isFormDirty(),\n            dirtyFields: formStateRef.current.dirtyFields,\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formStateRef.current.errors,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current, isWeb),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        if (fieldArrayNamesRef.current.has(fieldNames)) {\n          const fieldArrayValue = get(\n            fieldArrayValuesRef.current,\n            fieldNames,\n            [],\n          );\n          fieldValues =\n            fieldArrayValue.length !==\n              compact(get(fieldValues, fieldNames, [])).length ||\n            !fieldArrayValue.length\n              ? fieldArrayValuesRef.current\n              : fieldValues;\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(\n        defaultValuesAtRenderRef.current,\n        name,\n        isEmptyDefaultValue\n          ? isObject(fieldValue)\n            ? { ...fieldValue }\n            : fieldValue\n          : defaultValue,\n      );\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current, isWeb),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          errors: formStateRef.current.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = cloneObject(\n      values || defaultValuesRef.current,\n      isWeb,\n    );\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values, isWeb) || {};\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      isUnMount.current = true;\n      observerRef.current && observerRef.current.disconnect();\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport compact from './compact';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(data, (Array.isArray(index) ? index : [index]).sort());\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","export default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(Array.isArray(value) ? value : [value || undefined]), ...data];\n}\n","export default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(Array.isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isObject from './isObject';\n\nfunction mapValueToBoolean<U>(value: U): boolean[] | Record<string, boolean>[] {\n  if (isObject(value)) {\n    const object: Record<string, boolean> = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport default <T>(value: T) =>\n  ((Array.isArray(value) ? value : [value]) as T[])\n    .map(mapValueToBoolean)\n    .flat();\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport getFieldArrayParentName from './logic/getNodeParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport fillBooleanArray from './utils/fillBooleanArray';\nimport compact from './utils/compact';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n  UnpackNestedValue,\n  DeepPartial,\n  UseFieldArrayMethods,\n} from './types';\nimport cloneObject from './utils/cloneObject';\n\nconst mapIds = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id'\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<ArrayField<TFieldArrayValues, TKeyName>>[] => {\n  if (process.env.NODE_ENV !== 'production') {\n    for (const value of values) {\n      if (typeof value === 'object') {\n        if (keyName in value) {\n          console.warn(\n            `📋 useFieldArray fieldValues contain the keyName \\`${keyName}\\` which is reserved for use by useFieldArray. https://react-hook-form.com/api#useFieldArray`,\n          );\n\n          break;\n        }\n      } else {\n        console.warn(\n          `📋 useFieldArray input's name should be in object shape instead of flat array. https://react-hook-form.com/api#useFieldArray`,\n        );\n\n        break;\n      }\n    }\n  }\n\n  return values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: generateId(),\n    ...value,\n  }));\n};\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>): UseFieldArrayMethods<\n  TFieldArrayValues,\n  TKeyName\n> => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray',\n      );\n    }\n  }\n\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isFormDirty,\n    updateWatchedValue,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    formStateRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    readFormStateRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n    validateResolver,\n    getValues,\n    shouldUnregister,\n    fieldArrayValuesRef,\n  } = control || methods.control;\n\n  const fieldArrayParentName = getFieldArrayParentName(name);\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>([\n    ...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n      ? get(fieldArrayDefaultValuesRef.current, name, [])\n      : get(\n          shouldUnregister\n            ? defaultValuesRef.current\n            : shallowFieldsStateRef.current,\n          name,\n          [],\n        )),\n  ]);\n  const [fields, setFields] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  set(fieldArrayValuesRef.current, name, fields);\n\n  const omitKey = <T extends (Partial<TFieldArrayValues> | undefined)[]>(\n    fields: T,\n  ) => fields.map(({ [keyName]: omitted, ...rest } = {}) => rest);\n\n  const getFieldArrayValue = React.useCallback(\n    () => get(fieldArrayValuesRef.current, name, []),\n    [],\n  );\n\n  const getCurrentFieldsValues = () =>\n    get(getValues(), name, getFieldArrayValue()).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...getFieldArrayValue()[index],\n        ...item,\n      }),\n    );\n\n  fieldArrayNamesRef.current.add(name);\n\n  if (\n    fieldArrayParentName &&\n    !get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n  ) {\n    set(\n      fieldArrayDefaultValuesRef.current,\n      fieldArrayParentName,\n      cloneObject(get(defaultValuesRef.current, fieldArrayParentName)),\n    );\n  }\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setFields(fieldsValues);\n    set(fieldArrayValuesRef.current, name, fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateResolver) {\n      const values = getValues();\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n\n  const resetFields = () => {\n    for (const key in fieldsRef.current) {\n      isMatchFieldArrayName(key, name) &&\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n    }\n  };\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const updateDirtyFieldsWithDefaultValues = <\n    T extends (Partial<TFieldArrayValues> | undefined)[]\n  >(\n    updatedFieldArrayValues?: T,\n  ) => {\n    if (updatedFieldArrayValues) {\n      set(\n        formStateRef.current.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues),\n          get(defaultValuesRef.current, name, []),\n          get(formStateRef.current.dirtyFields, name, []),\n        ),\n      );\n    }\n  };\n\n  const batchStateUpdate = <\n    T extends Function,\n    K extends (Partial<TFieldArrayValues> | undefined)[]\n  >(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n      argC?: unknown;\n      argD?: unknown;\n    },\n    updatedFieldValues?: K,\n    updatedFormValues: (Partial<TFieldArrayValues> | undefined)[] = [],\n    shouldSet = true,\n    shouldUpdateValid = false,\n  ) => {\n    if (get(shallowFieldsStateRef.current, name)) {\n      const output = method(\n        get(shallowFieldsStateRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(shallowFieldsStateRef.current, name, output);\n    }\n\n    if (get(fieldArrayDefaultValuesRef.current, name)) {\n      const output = method(\n        get(fieldArrayDefaultValuesRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\n      cleanup(fieldArrayDefaultValuesRef.current);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(formStateRef.current.touched, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touched, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touched, name, output);\n      cleanup(formStateRef.current.touched);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      const output = method(\n        get(formStateRef.current.dirtyFields, name, []),\n        args.argC,\n        args.argD,\n      );\n      shouldSet && set(formStateRef.current.dirtyFields, name, output);\n      updateDirtyFieldsWithDefaultValues(updatedFieldValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    if (\n      shouldUpdateValid &&\n      readFormStateRef.current.isValid &&\n      !validateResolver\n    ) {\n      set(\n        validFieldsRef.current,\n        name,\n        method(get(validFieldsRef.current, name, []), args.argA),\n      );\n      cleanup(validFieldsRef.current);\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        method(get(fieldsWithValidationRef.current, name, []), args.argA),\n      );\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    updateFormState({\n      errors: formStateRef.current.errors,\n      dirtyFields: formStateRef.current.dirtyFields,\n      isDirty: isFormDirty(name, omitKey(updatedFormValues)),\n      touched: formStateRef.current.touched,\n    });\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const updateFormValues = [\n      ...getCurrentFieldsValues(),\n      ...mapIds(Array.isArray(value) ? value : [value], keyName),\n    ];\n    setFieldAndValidState(updateFormValues);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      updateDirtyFieldsWithDefaultValues(updateFormValues);\n\n      updateFormState({\n        isDirty: true,\n        dirtyFields: formStateRef.current.dirtyFields,\n      });\n    }\n\n    !shouldUnregister &&\n      set(shallowFieldsStateRef.current, name, [\n        ...(get(shallowFieldsStateRef.current, name) || []),\n        value,\n      ]);\n    focusIndexRef.current = shouldFocus ? fields.length : -1;\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      mapIds(Array.isArray(value) ? value : [value], keyName),\n    );\n\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: emptyArray,\n        argC: fillBooleanArray(value),\n      },\n      updatedFieldArrayValues,\n    );\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldValues: (\n      | Partial<TFieldArrayValues>\n      | undefined\n    )[] = removeArrayAt(fieldValues, index);\n    setFieldAndValidState(\n      updatedFieldValues as Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n    );\n    resetFields();\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n        argC: index,\n      },\n      updatedFieldValues,\n      removeArrayAt(fieldValues, index),\n      true,\n      true,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldArrayValues = insertAt(\n      fieldValues,\n      index,\n      mapIds(Array.isArray(value) ? value : [value], keyName),\n    );\n\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: emptyArray,\n        argC: index,\n        argD: fillBooleanArray(value),\n      },\n      updatedFieldArrayValues,\n      insertAt(fieldValues, index),\n    );\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n        argC: indexA,\n        argD: indexB,\n      },\n      undefined,\n      fieldValues,\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n        argC: from,\n        argD: to,\n      },\n      undefined,\n      fieldValues,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        console.warn(\n          '📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValuesRef.current, name, defaultValues);\n    }\n\n    updateWatchedValue(name);\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n\n    if (!getFieldArrayParentName(name)) {\n      resetFunctions[name] = <TFieldValues>(\n        data?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n      ) => {\n        resetFields();\n        !data && unset(fieldArrayDefaultValuesRef.current, name);\n        unset(shallowFieldsStateRef.current, name);\n        memoizedDefaultValues.current = get(\n          data || defaultValuesRef.current,\n          name,\n        );\n        setFields(mapIds(memoizedDefaultValues.current, keyName));\n      };\n    }\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      unset(fieldArrayValuesRef, name);\n      fieldArrayNames.delete(name);\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name, fields]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import { useFormContext } from './useFormContext';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport * as React from 'react';\nimport isFunction from './utils/isFunction';\nimport skipValidation from './logic/skipValidation';\nimport getInputValue from './logic/getInputValue';\nimport set from './utils/set';\nimport { Control, ControllerProps, UseField } from './types';\n\nexport function useField<\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  onFocus,\n}: Exclude<\n  ControllerProps<TAs, TControl>,\n  'as' | 'render'\n>): UseField<TControl> {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formStateRef: {\n      current: { isSubmitted, touched, errors, dirtyFields },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const ref = React.useRef({\n    focus: () => null,\n  });\n  const onFocusRef = React.useRef(\n    onFocus ||\n      (() => {\n        if (isFunction(ref.current.focus)) {\n          ref.current.focus();\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (!isFunction(ref.current.focus)) {\n            console.warn(\n              `📋 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`,\n            );\n          }\n        }\n      }),\n  );\n\n  const shouldValidate = React.useCallback(\n    (isBlurEvent?: boolean) =>\n      !skipValidation({\n        isBlurEvent,\n        isReValidateOnBlur,\n        isReValidateOnChange,\n        isSubmitted,\n        isTouched: !!get(touched, name),\n        ...mode,\n      }),\n    [\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      touched,\n      name,\n      mode,\n    ],\n  );\n\n  const commonTask = React.useCallback(([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  }, []);\n\n  const registerField = React.useCallback(\n    (shouldUpdateValue?: boolean) => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!name) {\n          return console.warn(\n            '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n          );\n        }\n      }\n\n      if (fieldsRef.current[name]) {\n        fieldsRef.current[name] = {\n          ref: fieldsRef.current[name]!.ref,\n          ...rules,\n        };\n      } else {\n        register(\n          Object.defineProperty(\n            {\n              name,\n              focus: onFocusRef.current,\n            },\n            'value',\n            {\n              set(data) {\n                setInputStateValue(data);\n                valueRef.current = data;\n              },\n              get() {\n                return valueRef.current;\n              },\n            },\n          ),\n          rules,\n        );\n\n        shouldUpdateValue = !get(defaultValuesRef.current, name);\n      }\n\n      shouldUpdateValue &&\n        isNotFieldArray &&\n        setInputStateValue(getInitialValue());\n    },\n    [rules, name, register],\n  );\n\n  React.useEffect(() => () => unregister(name), [name]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    !fieldsRef.current[name] && registerField(true);\n  });\n\n  const onBlur = React.useCallback(() => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    shouldValidate(true) && trigger(name);\n  }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\n\n  const onChange = React.useCallback(\n    (...event: any[]) =>\n      setValue(name, commonTask(event), {\n        shouldValidate: shouldValidate(),\n        shouldDirty: true,\n      }),\n    [setValue, name, shouldValidate],\n  );\n\n  return {\n    field: {\n      onChange,\n      onBlur,\n      name,\n      value,\n      ref,\n    },\n    state: {\n      inValid: !get(errors, name),\n      isDirty: !!get(dirtyFields, name),\n      isTouched: !!get(touched, name),\n    },\n  };\n}\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import * as React from 'react';\nimport { useField } from './useField';\nimport { Control } from './types';\nimport { ControllerProps } from './types';\n\ntype NativeInputs = 'input' | 'select' | 'textarea';\n\nconst Controller = <\n  TAs extends React.ReactElement | React.ComponentType<any> | NativeInputs,\n  TControl extends Control = Control\n>(\n  props: ControllerProps<TAs, TControl>,\n) => {\n  const { rules, as, render, defaultValue, control, onFocus, ...rest } = props;\n  const { field } = useField(props);\n\n  const componentProps = {\n    ...rest,\n    ...field,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, componentProps)\n      : React.createElement(as as NativeInputs, componentProps as any)\n    : render\n    ? render(field)\n    : null;\n};\n\nexport { Controller };\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default function isErrorStateChanged<TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport {\n  DeepPartial,\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch',\n      );\n    }\n  }\n\n  const {\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const updateValue = React.useState<unknown>()[1];\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (name === '') {\n        console.warn(\n          '📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch',\n        );\n      }\n    }\n\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\n    const watchFieldsHook = useWatchFieldsRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = () => updateValue({});\n    watchInternal(name, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    name,\n    useWatchRenderFunctionsRef,\n    useWatchFieldsRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return idRef.current\n    ? watchInternal(name, defaultValueRef.current, idRef.current)\n    : isUndefined(defaultValue)\n    ? isString(name)\n      ? get(defaultValuesRef.current, name)\n      : Array.isArray(name)\n      ? name.reduce(\n          (previous, inputName) => ({\n            ...previous,\n            [inputName]: get(defaultValuesRef.current, inputName),\n          }),\n          {},\n        )\n      : defaultValuesRef.current\n    : defaultValue;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","isObjectType","isNullOrUndefined","Array","isArray","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","reduce","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","previous","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","field","current","disabled","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","get","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","Object","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","deepMerge","target","source","isPrimitive","targetValue","sourceValue","setDirtyFields","defaultValues","dirtyFields","parentName","[object Object]","shallowFieldsState","shouldUnregister","search","output","isString","startsWith","find","transformToNestObject","deepEqual","object1","object2","isErrorObject","keys1","keys2","includes","val1","val2","RegExp","validationData","isRegex","message","isValidElement","getValidateError","isMessage","validateAllFieldCriteria","errors","error","types","async","required","maxLength","minLength","min","max","pattern","validate","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","maxLengthOutput","minLengthOutput","patternValue","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","entries","getPath","pathWithIndex","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","cloneObject","isWeb","copy","File","getTime","Set","Map","mode","isOnSubmit","isWindowUndefined","window","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","toString","indexes","i","temp","splice","removeAtIndexes","sort","from","to","indexA","indexB","prepend","insert","fill","mapValueToBoolean","mapIds","keyName","generateId","useField","rules","control","onFocus","methods","defaultValuesRef","setValue","register","unregister","trigger","reValidateMode","formStateRef","touched","updateFormState","readFormStateRef","fieldArrayNamesRef","isNotFieldArray","isNameInFieldArray","getInitialValue","setInputStateValue","React.useState","valueRef","React.useRef","focus","onFocusRef","shouldValidate","React.useCallback","skipValidation","commonTask","event","getInputValue","registerField","shouldUpdateValue","defineProperty","React.useEffect","onBlur","onChange","shouldDirty","state","inValid","isDirty","props","as","render","rest","componentProps","React.isValidElement","React.cloneElement","React.createElement","_a","children","Provider","focusIndexRef","isFormDirty","updateWatchedValue","resetFieldArrayFunctionRef","removeFieldEventListener","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValuesRef","validateResolver","getValues","fieldArrayValuesRef","fieldArrayParentName","getFieldArrayParentName","memoizedDefaultValues","fields","setFields","omitKey","_b","getFieldArrayValue","getCurrentFieldsValues","setFieldAndValidState","fieldsValues","resetFields","cleanup","updateDirtyFieldsWithDefaultValues","updatedFieldArrayValues","setFieldArrayDirtyFields","batchStateUpdate","method","args","updatedFieldValues","updatedFormValues","shouldSet","shouldUpdateValid","argA","argB","argC","argD","pop","resetFunctions","fieldArrayNames","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","fillBooleanArray","append","updateFormValues","remove","removeArrayAt","insertAt","resolver","context","shouldFocusError","criteriaMode","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","handleChangeRef","contextRef","resolverRef","modeRef","modeChecker","isValidateAllFieldCriteria","formState","setFormState","submitCount","isSubmitting","isSubmitSuccessful","observerRef","shouldRenderBaseOnError","shouldRender","shouldReRender","validFields","fieldsWithValidation","previousError","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","formValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","Promise","all","setInternalValues","setInternalValue","config","has","isFieldWatched","match","renderWatchedInputs","found","size","getNodeParentName","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","parentNodeName","currentError","forceDelete","handleChange","fieldRef","removeAllEventListeners","findRemovedFieldAndRemoveListener","watchField","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","fieldArrayValue","assignWatchFields","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldErrors","fieldError","focusOnErrorField","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","refOrValidationOptions","React.useMemo","watch","prop","reset","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","updateValue","idRef","defaultValueRef","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}